{"version":3,"file":"static/js/428.54e20c01.chunk.js","mappings":"iKAGA,MAmDA,EAnD6BA,IAAgD,IAA/C,gBAAEC,EAAe,YAAEC,EAAW,QAAEC,GAASH,EAErE,MAgBMI,ECfsB,SAACC,GAA8B,IAAtBC,IAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAE9C,OAAe,OAAXF,QAA8BI,IAAXJ,GAAwBK,MAAML,GAC5C,QAGS,IAAIM,KAAKC,aAAa,QAAS,CAC/CC,MAAO,WACPC,SAAU,MACVC,sBAAuBT,EAAY,EAAI,EACvCU,sBAAuBV,EAAY,EAAI,IAGxBW,OAAOZ,EAC1B,CDC4Ba,CAAejB,GACnCkB,EAjBcC,KAClB,MAAMC,EAAUC,KAAKC,MAAOH,EAAK,IAAQ,IACnCI,EAAUF,KAAKC,MAAOH,EAAE,IAAkB,IAC1CK,EAAQH,KAAKC,MAAOH,EAAE,KAAuB,IAC7CM,EAAOJ,KAAKC,MAAMH,EAAE,OAE1B,IAAIO,EAAa,GAMjB,OALID,EAAO,IAAGC,GAAc,GAAGD,QAAWA,EAAO,EAAI,IAAM,OACvDD,EAAQ,IAAGE,GAAc,GAAGF,SAAaA,EAAQ,EAAI,IAAM,OAC3DD,EAAU,IAAGG,GAAc,GAAGH,WAAiBA,EAAU,EAAI,IAAM,OACnEH,EAAU,GAAc,IAATK,IAAYC,GAAc,GAAGN,WAAiBA,EAAU,EAAI,IAAM,OAE9EM,EAAWC,MAAM,EAKJC,CAAW3B,GAEjC,OACE4B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6EAA4EC,UACzFF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iIAAgIC,UAC7IC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0BAAyBC,SAAC,mBACxCC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,qBAAoBC,SAAA,CAAC,wBAAsBb,MAExDW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gDAA+CC,UAC5DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6BAA4BC,SAAA,EACzCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,SAAC,sCAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oCAAmCC,SAAE5B,UAIxD0B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,SAAC,gGAIzCF,EAAAA,EAAAA,KAAA,UACEI,QAAS/B,EACT4B,UAAU,8HAA6HC,SACxI,wBAKD,C","sources":["components/OfflineProgressModal.js","utils/formatters.js"],"sourcesContent":["import React from 'react';\r\nimport { formatCurrency } from '../utils/formatters';\r\n\r\nconst OfflineProgressModal = ({ offlineEarnings, offlineTime, onClose }) => {\r\n  // Format time display (convert milliseconds to hours, minutes, seconds)\r\n  const formatTime = (ms) => {\r\n    const seconds = Math.floor((ms / 1000) % 60);\r\n    const minutes = Math.floor((ms / (1000 * 60)) % 60);\r\n    const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);\r\n    const days = Math.floor(ms / (1000 * 60 * 60 * 24));\r\n    \r\n    let timeString = '';\r\n    if (days > 0) timeString += `${days} day${days > 1 ? 's' : ''} `;\r\n    if (hours > 0) timeString += `${hours} hour${hours > 1 ? 's' : ''} `;\r\n    if (minutes > 0) timeString += `${minutes} minute${minutes > 1 ? 's' : ''} `;\r\n    if (seconds > 0 && days === 0) timeString += `${seconds} second${seconds > 1 ? 's' : ''} `;\r\n    \r\n    return timeString.trim();\r\n  };\r\n  \r\n  // Format money with commas\r\n  const formattedEarnings = formatCurrency(offlineEarnings);\r\n  const formattedTime = formatTime(offlineTime);\r\n  \r\n  return (\r\n    <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-70 z-50\">\r\n      <div className=\"bg-gradient-to-br from-blue-900 to-purple-900 text-white p-6 rounded-xl shadow-2xl max-w-md mx-4 w-full border border-blue-500\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold mb-2\">Welcome Back!</h2>\r\n          <p className=\"text-blue-200 mb-6\">You've been away for {formattedTime}</p>\r\n          \r\n          <div className=\"bg-blue-800 bg-opacity-50 rounded-lg p-5 mb-6\">\r\n            <div className=\"flex flex-col items-center\">\r\n              <div className=\"text-xl mb-1\">While you were away, you earned:</div>\r\n              <div className=\"text-3xl font-bold text-green-400\">{formattedEarnings}</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-sm opacity-80 mb-6\">\r\n            Your businesses, investments, and assets continued to generate income while you were away.\r\n          </div>\r\n          \r\n          <button\r\n            onClick={onClose}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg transition duration-200 transform hover:scale-105\"\r\n          >\r\n            Claim Rewards\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OfflineProgressModal; ","/**\r\n * Format a number as currency with dollar sign\r\n * @param {number} amount - The amount to format\r\n * @param {boolean} showCents - Whether to show cents\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (amount, showCents = true) => {\r\n  // Handle null/undefined/NaN\r\n  if (amount === null || amount === undefined || isNaN(amount)) {\r\n    return '$0.00';\r\n  }\r\n  \r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: showCents ? 2 : 0,\r\n    maximumFractionDigits: showCents ? 2 : 0,\r\n  });\r\n  \r\n  return formatter.format(amount);\r\n};\r\n\r\n/**\r\n * Format a number with commas for thousands\r\n * @param {number} num - The number to format\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted number\r\n */\r\nexport const formatNumber = (num, decimals = 0) => {\r\n  if (num === null || num === undefined || isNaN(num)) {\r\n    return '0';\r\n  }\r\n  \r\n  return num.toLocaleString('en-US', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  });\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param {number} value - The decimal value (e.g., 0.05 for 5%)\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted percentage\r\n */\r\nexport const formatPercent = (value, decimals = 1) => {\r\n  if (value === null || value === undefined || isNaN(value)) {\r\n    return '0%';\r\n  }\r\n  \r\n  return `${(value * 100).toLocaleString('en-US', {\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals\r\n  })}%`;\r\n};\r\n\r\n/**\r\n * Format a time duration in seconds to a human-readable string\r\n * @param {number} seconds - The duration in seconds\r\n * @returns {string} Formatted time string\r\n */\r\nexport const formatTime = (seconds) => {\r\n  if (!seconds || isNaN(seconds)) return '0s';\r\n  \r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  \r\n  let result = '';\r\n  if (days > 0) result += `${days}d `;\r\n  if (hours > 0) result += `${hours}h `;\r\n  if (minutes > 0) result += `${minutes}m `;\r\n  if (secs > 0 && days === 0) result += `${secs}s`;\r\n  \r\n  return result.trim();\r\n};\r\n\r\n/**\r\n * Adds ordinal suffix to a number (1st, 2nd, 3rd, etc)\r\n * @param {number} number - The number to format\r\n * @returns {string} Number with ordinal suffix\r\n */\r\nexport const ordinalSuffix = (number) => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  \r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n}; "],"names":["_ref","offlineEarnings","offlineTime","onClose","formattedEarnings","amount","showCents","arguments","length","undefined","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatCurrency","formattedTime","ms","seconds","Math","floor","minutes","hours","days","timeString","trim","formatTime","_jsx","className","children","_jsxs","onClick"],"sourceRoot":""}